import jwt from 'jsonwebtoken'

export const secret = process.env.JWT_SECRET || `i456asfdADFafadil_w`

// A GraphQL schema, using SDL (schema definition language)
export const typeDefs = `#gql
  """
    Authentication type User
  """
  type User {
    email: String
    token: String
    error: JSON
  }

  """
    Returns current user
  """
  type Query {
    user: User
  }

  """
    Authentication API Mutations
  """
  type Mutation {
    """
      Returns User object with Autorization token
    """
    login( email: String password: String ): User
    """
      Returns empty object
    """
    logout: User
  }
`

//  Resolver definition for each API endpoint â€” js object
export const resolvers = {
  Query: {
    user: () => ({})
  },
  Mutation: {
    login: (_1,{email,password}) => login(email,password),
    logout: (_1,_2,ctx) => logout(ctx),
  }
}

// Resolvers
function login(email,password) {
  if (!email || email.length === 0) return {error:{message:'Email required!'}}
  if (!password || password.length === 0) return {error:{message:'Password required!'}}
  const token = jwt.sign({ email }, secret,{ expiresIn: '1d' });
  return {email,token}
}

function logout(ctx) {
  console.log({user:ctx.req.user});
  return {}
}
export default {typeDefs,resolvers,secret}
